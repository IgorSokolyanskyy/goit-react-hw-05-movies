{"version":3,"file":"static/js/779.f8f2a3d1.chunk.js","mappings":"0MAEaA,E,MAAMC,GAAAA,IAAH,+G,SCGVC,EAAaC,SAASC,cAAc,gBAE3B,SAASC,IACtB,OAAOC,EAAAA,EAAAA,eACL,SAACN,EAAD,WACE,SAAC,KAAD,CAAOO,KAAK,QAAQC,MAAM,UAAUC,OAAQ,IAAKC,MAAO,QAE1DR,EAEH,C,kKCZYS,EAAOV,EAAAA,GAAAA,GAAH,mGAMJW,EAAIX,EAAAA,GAAAA,EAAH,0D,mBCDC,SAASY,IACtB,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAgCF,EAAAA,EAAAA,WAAS,GAAzC,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QA6BR,OA3BAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBACjBC,EAASF,EAAWE,OAEpBC,EAAO,mCAAG,6FACdT,GAAW,GADG,mBAIcU,EAAAA,EAAAA,IAAaP,EAASK,GAJpC,gBAIJG,EAJI,EAIJA,QAERb,EAAWa,GANC,mDAQO,kBAAf,KAAMC,KARE,mDAUZV,EAAS,EAAD,IAVI,yBAYZF,GAAW,GAZC,4EAAH,qDAkBb,OAFAS,IAEO,WACLH,EAAWO,OACZ,CACF,GAAE,CAACV,KAGF,2BACGJ,IAAa,SAACZ,EAAA,EAAD,IAEbU,EAAQiB,QACP,wBACGjB,EAAQkB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,UAACzB,EAAD,YACE,UAACC,EAAD,YACE,iCADF,IACgBuB,MAEhB,UAACvB,EAAD,YACE,uCADF,IACsBwB,OALbF,EADA,OAYf,cACEG,MAAO,CACLC,UAAW,SACXC,OAAQ,EACRC,SAAU,GACVhC,MAAO,OALX,sDAYDW,IACC,eACEkB,MAAO,CACLC,UAAW,SACX9B,MAAO,MACPiC,UAAW,EACXC,aAAc,GACdF,SAAU,IANd,+EAcP,C,wLCpFKG,E,QAAQC,EAAAA,OAAa,CACzBC,QAAS,gCACTC,OAAQ,CACNC,QAAS,mCACTC,SAAU,WAIRC,EAAiB,mCAAG,WAAMvB,GAAN,2FACDiB,EAAMO,IAAN,qBAAgC,CAAExB,OAAAA,IADjC,uBAChByB,EADgB,EAChBA,KACFC,EAASD,EAAKtB,QAFI,kBAIjBuB,GAJiB,2CAAH,sDAOjBC,EAAc,mCAAG,WAAOnB,EAAIR,GAAX,yFACEiB,EAAMO,IAAN,iBAAoBhB,GAAM,CAAER,OAAAA,IAD9B,uBACbyB,EADa,EACbA,KADa,kBAGdA,GAHc,2CAAH,wDAMdG,EAAS,mCAAG,WAAOpB,EAAIR,GAAX,yFACOiB,EAAMO,IAAN,iBAAoBhB,EAApB,YAAkC,CAAER,OAAAA,IAD3C,uBACRyB,EADQ,EACRA,KADQ,kBAGTA,GAHS,2CAAH,wDAMTvB,EAAY,mCAAG,WAAOM,EAAIR,GAAX,yFACIiB,EAAMO,IAAN,iBAAoBhB,EAApB,YAAkC,CAAER,OAAAA,IADxC,uBACXyB,EADW,EACXA,KADW,kBAGZA,GAHY,2CAAH,wDAMZI,EAAmB,mCAAG,WAAMC,GAAN,2FACHb,EAAMO,IAAN,6BAAgCM,IAD7B,uBAClBL,EADkB,EAClBA,KACFtB,EAAUsB,EAAKtB,QAFK,kBAInBA,GAJmB,2CAAH,qD","sources":["components/Loader/Louder.styled.js","components/Loader/Loader.jsx","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","services/Api.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Box = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n`;\n","import { createPortal } from 'react-dom';\nimport { Watch } from 'react-loader-spinner';\n\nimport { Box } from './Louder.styled';\n\nconst loaderRoot = document.querySelector('#loader-root');\n\nexport default function Loader() {\n  return createPortal(\n    <Box>\n      <Watch type=\"Watch\" color=\"#0fed1e\" height={100} width={100} />\n    </Box>,\n    loaderRoot\n  );\n}\n","import styled from 'styled-components';\n\nexport const Item = styled.li`\n  list-style: none;\n  margin-bottom: 18px;\n  background-color: #8bc4e2;\n`;\n\nexport const P = styled.p`\n  margin: 0;\n  margin-top: 6px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { fetchReviews } from '../../services/Api';\nimport { Item, P } from './Reviews.styled';\nimport Loader from '../Loader/Loader';\n\nexport default function Reviews() {\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const controller = new AbortController();\n    const signal = controller.signal;\n\n    const getData = async () => {\n      setLoading(true);\n\n      try {\n        const { results } = await fetchReviews(movieId, signal);\n\n        setReviews(results);\n      } catch (error) {\n        if (error.name === 'CanceledError') return;\n\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    getData();\n\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n\n      {reviews.length ? (\n        <ul>\n          {reviews.map(({ id, author, content }) => (\n            <Item key={id}>\n              <P>\n                <b>Name:</b> {author}\n              </P>\n              <P>\n                <b> Character:</b> {content}\n              </P>\n            </Item>\n          ))}\n        </ul>\n      ) : (\n        <p\n          style={{\n            textAlign: 'center',\n            margin: 0,\n            fontSize: 32,\n            color: 'red',\n          }}\n        >\n          We don't have any reviews for this movie\n        </p>\n      )}\n\n      {error && (\n        <h2\n          style={{\n            textAlign: 'center',\n            color: 'red',\n            marginTop: 0,\n            marginBottom: 25,\n            fontSize: 44,\n          }}\n        >\n          The service is temporarily unavailable. Please try again later.\n        </h2>\n      )}\n    </div>\n  );\n}\n","import axios from 'axios';\n\nconst AXIOS = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: '2ac3f085729a6d415a45dd563d848739',\n    language: 'en-US',\n  },\n});\n\nconst fetchTrendsMovies = async signal => {\n  const { data } = await AXIOS.get(`trending/movie/day`, { signal });\n  const trends = data.results;\n\n  return trends;\n};\n\nconst fetchMovieById = async (id, signal) => {\n  const { data } = await AXIOS.get(`/movie/${id}`, { signal });\n\n  return data;\n};\n\nconst fetchCast = async (id, signal) => {\n  const { data } = await AXIOS.get(`/movie/${id}/credits`, { signal });\n\n  return data;\n};\n\nconst fetchReviews = async (id, signal) => {\n  const { data } = await AXIOS.get(`/movie/${id}/reviews`, { signal });\n\n  return data;\n};\n\nconst fetchMoviesBySearch = async searchQuery => {\n  const { data } = await AXIOS.get(`search/movie?query=${searchQuery}`);\n  const results = data.results;\n\n  return results;\n};\n\nexport {\n  fetchTrendsMovies,\n  fetchMovieById,\n  fetchCast,\n  fetchReviews,\n  fetchMoviesBySearch,\n};\n"],"names":["Box","styled","loaderRoot","document","querySelector","Loader","createPortal","type","color","height","width","Item","P","Reviews","useState","reviews","setReviews","isLoading","setLoading","error","setError","movieId","useParams","useEffect","controller","AbortController","signal","getData","fetchReviews","results","name","abort","length","map","id","author","content","style","textAlign","margin","fontSize","marginTop","marginBottom","AXIOS","axios","baseURL","params","api_key","language","fetchTrendsMovies","get","data","trends","fetchMovieById","fetchCast","fetchMoviesBySearch","searchQuery"],"sourceRoot":""}