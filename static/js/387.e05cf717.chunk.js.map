{"version":3,"file":"static/js/387.e05cf717.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/Loader/Louder.styled.js","components/Loader/Loader.jsx","services/Api.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.div`\n  display: flex;\n  justify-content: center;\n  gap: 25px;\n  flex-wrap: wrap;\n  list-style: none;\n`;\n\nexport const Img = styled.img`\n  width: 210px;\n  height: 270px;\n\n  border-radius: 5px;\n`;\n\nexport const Item = styled.li`\n  width: 210px;\n`;\n\nexport const P = styled.p`\n  margin: 0;\n  margin-top: 6px;\n`;\n","import { useState, useEffect } from 'react';\nimport { fetchCast } from '../../services/Api';\nimport { useParams } from 'react-router-dom';\nimport { List, Img, Item, P } from './Cast.styled';\n\nimport noPhoto from 'images/noPhoto.jpg';\nimport Loader from '../Loader/Loader';\n\nexport default function Cast() {\n  const [actors, setActors] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const controller = new AbortController();\n    const signal = controller.signal;\n\n    const getData = async () => {\n      setLoading(true);\n\n      try {\n        const { cast } = await fetchCast(movieId, signal);\n\n        setActors(cast);\n      } catch (error) {\n        if (error.name === 'CanceledError') return;\n\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    getData();\n\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n\n  const BASE_URL = 'https://image.tmdb.org/t/p/w500/';\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n\n      {actors.length ? (\n        <List>\n          {actors.map(({ cast_id, profile_path, name, character }) => (\n            <Item key={cast_id}>\n              <Img\n                src={profile_path ? `${BASE_URL}${profile_path}` : noPhoto}\n                alt={name}\n              />\n              <P>\n                Name: <b>{name}</b>\n              </P>\n              <P>\n                Character: <b>{character}</b>\n              </P>\n            </Item>\n          ))}\n        </List>\n      ) : (\n        <p\n          style={{\n            textAlign: 'center',\n            margin: 0,\n            fontSize: 32,\n            color: 'red',\n          }}\n        >\n          We don't have any reviews for this movie\n        </p>\n      )}\n\n      {error && (\n        <h2\n          style={{\n            textAlign: 'center',\n            color: 'red',\n            marginTop: 0,\n            marginBottom: 25,\n            fontSize: 44,\n          }}\n        >\n          The service is temporarily unavailable. Please try again later.\n        </h2>\n      )}\n    </div>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Box = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n`;\n","import { createPortal } from 'react-dom';\nimport { Watch } from 'react-loader-spinner';\n\nimport { Box } from './Louder.styled';\n\nconst loaderRoot = document.querySelector('#loader-root');\n\nexport default function Loader() {\n  return createPortal(\n    <Box>\n      <Watch type=\"Watch\" color=\"#0fed1e\" height={100} width={100} />\n    </Box>,\n    loaderRoot\n  );\n}\n","import axios from 'axios';\n\nconst AXIOS = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: '2ac3f085729a6d415a45dd563d848739',\n    language: 'en-US',\n  },\n});\n\nconst fetchTrendsMovies = async signal => {\n  const { data } = await AXIOS.get(`trending/movie/day`, { signal });\n  const trends = data.results;\n\n  return trends;\n};\n\nconst fetchMovieById = async (id, signal) => {\n  const { data } = await AXIOS.get(`/movie/${id}`, { signal });\n\n  return data;\n};\n\nconst fetchCast = async (id, signal) => {\n  const { data } = await AXIOS.get(`/movie/${id}/credits`, { signal });\n\n  return data;\n};\n\nconst fetchReviews = async (id, signal) => {\n  const { data } = await AXIOS.get(`/movie/${id}/reviews`, { signal });\n\n  return data;\n};\n\nconst fetchMoviesBySearch = async searchQuery => {\n  const { data } = await AXIOS.get(`search/movie?query=${searchQuery}`);\n  const results = data.results;\n\n  return results;\n};\n\nexport {\n  fetchTrendsMovies,\n  fetchMovieById,\n  fetchCast,\n  fetchReviews,\n  fetchMoviesBySearch,\n};\n"],"names":["List","styled","Img","Item","P","Cast","useState","actors","setActors","isLoading","setLoading","error","setError","movieId","useParams","useEffect","controller","AbortController","signal","getData","fetchCast","cast","name","abort","Loader","length","map","cast_id","profile_path","character","src","noPhoto","alt","style","textAlign","margin","fontSize","color","marginTop","marginBottom","Box","loaderRoot","document","querySelector","createPortal","type","height","width","AXIOS","axios","baseURL","params","api_key","language","fetchTrendsMovies","get","data","trends","results","fetchMovieById","id","fetchReviews","fetchMoviesBySearch","searchQuery"],"sourceRoot":""}